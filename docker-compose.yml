services:
  postgres:
    image: debezium/postgres:16
    container_name: sp_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: streaming
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d streaming"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: sp_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: sp_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  kafka-connect:
    image: debezium/connect:2.7.0.Final
    container_name: sp_connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "streaming-connect"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    volumes:
      - ./debezium/:/etc/kafka-connect/debezium
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  jobmanager:
    build: ./flink
    container_name: sp_jobmanager
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        python.client.executable: python3
        python.executable: python3
    volumes:
      - ./flink:/opt/flink_jobs
    command: jobmanager
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/jobs || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  taskmanager:
    build: ./flink
    container_name: sp_taskmanager
    depends_on:
      jobmanager:
        condition: service_healthy
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 4
        python.client.executable: python3
        python.executable: python3
    volumes:
      - ./flink:/opt/flink_jobs
    command: taskmanager

  datagen:
    build: ./data-generator
    container_name: sp_datagen
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pgdata:
  jar-cache:
